% clc; clear; close all;
% 
% % Parámetros conocidos
% J_m = 14e-6; % Momento de inercia del motor [kg·m²]
% r = 120; % Relación de transmisión
% J_l_min = 0.0833; % Momento de inercia de carga mínimo [kg·m²]
% J_l_nom = 0.4583; % Momento de inercia de carga nominal [kg·m²]
% J_l_max = 0.4583; % Momento de inercia de carga máximo [kg·m²]
% 
% % Parámetros del controlador PID
% omega_n = 800; % Frecuencia natural [rad/s]
% zeta = 0.75; % Factor de amortiguamiento
% n = 2.5; % Relación entre frecuencias características
% 
% % Cálculo de inercia equivalente
% J_eq_min = J_m + J_l_min / r^2; % J_eq mínimo
% J_eq_nom = J_m + J_l_nom / r^2; % J_eq nominal
% J_eq_max = J_m + J_l_max / r^2; % J_eq máximo
% 
% % Imprimir valores de J_eq para verificar que cambian
% fprintf('J_eq_min = %.4e kg·m²\n', J_eq_min);
% fprintf('J_eq_nom = %.4e kg·m²\n', J_eq_nom);
% fprintf('J_eq_max = %.4e kg·m²\n', J_eq_max);
% 
% % Calcular ganancias y polos para cada caso
% [b_a_nom, K_sa_nom, K_sia_nom, poles_nominal] = calculate_controller_gains(J_eq_nom, omega_n, n);
% [b_a_min, K_sa_min, K_sia_min, poles_min] = calculate_controller_gains(J_eq_min, omega_n, n);
% [b_a_max, K_sa_max, K_sia_max, poles_max] = calculate_controller_gains(J_eq_max, omega_n, n);
% 
% % Imprimir resultados de las ganancias
% fprintf('Ganancias para J_eq_min:\n');
% fprintf('  b_a = %.4f Nm/(rad/s), K_sa = %.4f Nm/rad, K_sia = %.4f Nm/(rad·s)\n', b_a_min, K_sa_min, K_sia_min);
% fprintf('Ganancias para J_eq_nom:\n');
% fprintf('  b_a = %.4f Nm/(rad/s), K_sa = %.4f Nm/rad, K_sia = %.4f Nm/(rad·s)\n', b_a_nom, K_sa_nom, K_sia_nom);
% fprintf('Ganancias para J_eq_max:\n');
% fprintf('  b_a = %.4f Nm/(rad/s), K_sa = %.4f Nm/rad, K_sia = %.4f Nm/(rad·s)\n', b_a_max, K_sa_max, K_sia_max);
% 
% % Imprimir polos para verificar que cambian
% fprintf('\nPolos para J_eq_min:\n');
% disp(poles_min);
% fprintf('Polos para J_eq_nom:\n');
% disp(poles_nominal);
% fprintf('Polos para J_eq_max:\n');
% disp(poles_max);
% 
% % Graficar polos
% figure;
% hold on; grid on; axis equal;
% title('Migración de Polos del Controlador PID');
% xlabel('Re(s) [rad/s]');
% ylabel('Im(s) [rad/s]');
% 
% % Ejes imaginarios y reales
% xline(0, '--k', 'Eje Real');
% yline(0, '--k', 'Eje Imaginario');
% 
% % Marcar polos
% scatter(real(poles_min), imag(poles_min), 100, 'g', 'x', 'LineWidth', 2, 'DisplayName', 'Polos PID Mínimos');
% scatter(real(poles_nominal), imag(poles_nominal), 100, 'm', 'x', 'LineWidth', 2, 'DisplayName', 'Polos PID Nominales');
% scatter(real(poles_max), imag(poles_max), 100, 'c', 'x', 'LineWidth', 2, 'DisplayName', 'Polos PID Máximos');
% 
% % Etiquetas y leyenda
% legend('Location', 'best');
% hold off;
% 
% % Función para calcular ganancias y polos del controlador
% function [b_a, K_sa, K_sia, poles] = calculate_controller_gains(J_eq, omega_n, n)
%     % Ganancias del controlador
%     b_a = J_eq * n * omega_n; % Ganancia proporcional (velocidad)
%     K_sa = J_eq * n * omega_n^2; % Ganancia proporcional (posición)
%     K_sia = J_eq * omega_n^3; % Ganancia integral (posición)
% 
%     % Polinomio característico del controlador: J_eq * s^3 + b_a * s^2 + K_sa * s + K_sia
%     poly_controller = [J_eq, b_a, K_sa, K_sia]; % Coeficientes [s^3, s^2, s, 1]
% 
%     % Raíces del polinomio característico (polos)
%     poles = roots(poly_controller);
% end

% Script para análisis de migración de polos del controlador PID
clear all; close all; clc;

% Parámetros constantes
Jm = 14e-6;          % kg.m^2
m = 1.0;             % kg
lcm = 0.25;          % m
Jcm = 0.0208;        % kg.m^2
ll = 0.50;           % m
r = 120;             % relación de reducción
n = 2.5;             % parámetro de sintonía serie
zeta = 0.75;         % amortiguamiento deseado
wn = 800;            % frecuencia natural deseada (rad/s)

% Vector de masa de carga útil
ml_vector = linspace(0, 0.375, 100);
polos = zeros(length(ml_vector), 3); % Matriz para almacenar los polos

% Cálculo de Jl y Jeq nominal (ml = 0)
Jl_nom = (m*lcm^2 + Jcm) + 0*ll^2;
Jeq_nom = Jm + Jl_nom/r^2;

% Cálculo de ganancias con Jeq nominal (se mantienen fijas)
ba = Jeq_nom * n * wn;
Ksa = Jeq_nom * n * wn^2;
Ksia = Jeq_nom * wn^3;

% Cálculo de polos para cada valor de ml
for i = 1:length(ml_vector)
    % Cálculo de nueva Jeq para cada ml
    Jl = (m*lcm^2 + Jcm) + ml_vector(i)*ll^2;
    Jeq = Jm + Jl/r^2;
    
    % Polinomio característico con ganancias fijas y nueva Jeq
    omega = (Ksia / Jeq)^(1/3);
    zita = 
    polos(i,:) = roots(coef);
end

% Gráfico de migración de polos
% Extraer polos específicos para la leyenda
polos_nom = polos(1,:);    % ml = 0
polos_max = polos(end,:);  % ml = 0.375

% Configuración del gráfico
figure('Name', 'Migración de Polos')
hold on; grid on;

% Graficar trayectorias completas
plot(real(polos(:,1)), imag(polos(:,1)), 'b-', 'LineWidth', 1.5, 'DisplayName', 'Trayectoria s_1')
plot(real(polos(:,2:3)), imag(polos(:,2:3)), 'r-', 'LineWidth', 1.5, 'DisplayName', 'Trayectoria s_{2,3}')

% Marcar polos nominales
plot(real(polos_nom(1)), imag(polos_nom(1)), 'bs', 'MarkerSize', 10, 'DisplayName', ...
    sprintf('s_1 (nom) = %.2f', polos_nom(1)))
plot(real(polos_nom(2:3)), imag(polos_nom(2:3)), 'rd', 'MarkerSize', 10, 'DisplayName', ...
    sprintf('s_{2,3} (nom) = %.2f ± %.2fi', real(polos_nom(2)), abs(imag(polos_nom(2)))))

% Marcar polos para ml máxima
plot(real(polos_max(1)), imag(polos_max(1)), 'bs', 'MarkerFaceColor', 'b', 'MarkerSize', 10, 'DisplayName', ...
    sprintf('s_1 (max) = %.2f', polos_max(1)))
plot(real(polos_max(2:3)), imag(polos_max(2:3)), 'rd', 'MarkerFaceColor', 'r', 'MarkerSize', 10, 'DisplayName', ...
    sprintf('s_{2,3} (max) = %.2f ± %.2fi', real(polos_max(2)), abs(imag(polos_max(2)))))

% Configuración del gráfico
xlabel('Eje Real')
ylabel('Eje Imaginario')
title('Migración de polos al variar la masa de carga útil (0 ≤ m_l ≤ 0.375 kg)')

% Agregar líneas de referencia
plot([0 0], ylim, 'k--', 'HandleVisibility', 'off')  % Eje imaginario
plot(xlim, [0 0], 'k--', 'HandleVisibility', 'off')  % Eje real

% Configurar leyenda
legend('Location', 'best', 'NumColumns', 1)
box on

% Ajustar límites para mejor visualización
axis equal
xlim([-850 -450])
ylim([-800 800])

% Mejorar aspecto general
set(gca, 'FontSize', 11)
grid minor

% Mostrar valores de polos para casos extremos
disp('Polos para ml = 0:')
disp(polos(1,:))
disp('Polos para ml = 0.375:')
disp(polos(end,:))

% Cálculo de amortiguamiento y frecuencia natural efectivos
for i = 1:length(ml_vector)
    polo_complejo = polos(i,2); % Tomamos uno de los polos complejos conjugados
    wn_eff(i) = abs(polo_complejo);
    zeta_eff(i) = -real(polo_complejo)/wn_eff(i);
end

% Gráfico de variación de parámetros
figure('Name', 'Variación de Parámetros')
subplot(2,1,1)
plot(ml_vector, wn_eff)
grid on
title('Frecuencia natural efectiva vs masa de carga')
xlabel('Masa de carga [kg]')
ylabel('\omega_n [rad/s]')

subplot(2,1,2)
plot(ml_vector, zeta_eff)
grid on
title('Amortiguamiento efectivo vs masa de carga')
xlabel('Masa de carga [kg]')
ylabel('\zeta')